#include "assembler.hpp"

#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ RISC-–∞—Å—Å–µ–º–±–ª–µ—Ä–∞
int main() {
    // üîß –ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ ‚Äî –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ .asm —Ñ–∞–π–ª–µ
    std::vector<std::string> testCases = {
        "ADD R1, R2, R3",
        "LW R4, 100(R5)",
        "BEQ R1, R0, label1",
        "LI R7, 255",
        "SW R2, 200(R6)",
        "HALT",
        "  ADD   R1 , R2 , R3  ",  // —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        "BEQ,R1,R0,label1"          // –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
    };

    std::cout << "=== –ü–∞—Ä—Å–∏–Ω–≥ RISC-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ===\n\n";

    for (const auto& line : testCases) {
        auto tokens = parseInstruction(line);

        std::cout << "–í—Ö–æ–¥: \"" << line << "\"\n";
        std::cout << "–í—ã—Ö–æ–¥: [";
        for (size_t i = 0; i < tokens.size(); ++i) {
            std::cout << "\"" << tokens[i] << "\"";
            if (i < tokens.size() - 1) std::cout << ", ";
        }
        std::cout << "]\n";
        std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " << tokens.size() << "\n";
        std::cout << "----------------------------------------\n";
    }

    return 0;
}
